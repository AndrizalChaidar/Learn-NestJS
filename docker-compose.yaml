version: "3.6"
services:
  api_gateway_service:
    build:
      context: .
      dockerfile: ./api_gateway_service/Dockerfile
    env_file:
      - api_gateway_service/.env
    environment:
      - NODE_ENV=production
      - POSTGRES_HOST=host.docker.internal
      - RABBITMQ_HOST=rabbitmq_music
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_started
      rabbitmq_music:
        condition: service_healthy
        restart: true
  song_service:
    build:
      context: .
      dockerfile: ./song_service/Dockerfile
    env_file:
      - song_service/.env
    environment:
      - NODE_ENV=production
      - POSTGRES_HOST=host.docker.internal
      - RABBITMQ_HOST=rabbitmq_music
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_started
      rabbitmq_music:
        condition: service_healthy
        restart: true
  postgres:
    image: postgres
    command: postgres -c 'max_connections=150'
    env_file:
      - song_service/.env
    environment:
      - POSTGRES_HOST=host.docker.internal
    ports:
      - "5430:5432"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - postgres_music:/var/lib/postgresql/data
  rabbitmq_music:
    image: "rabbitmq:3.8-management"
    container_name: rabbitmq_music
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 30s
      retries: 3
    ports:
      - 5672:5672 # RabbitMQ default port
      - 15672:15672 # RabbitMQ management UI
    environment:
      RABBITMQ_DEFAULT_USER: your_user
      RABBITMQ_DEFAULT_PASS: your_password
    volumes:
      - rabbitmq_vol:/var/lib/rabbitmq
volumes:
  postgres_music:
  rabbitmq_vol:
